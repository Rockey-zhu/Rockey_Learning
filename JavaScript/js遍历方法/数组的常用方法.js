/*{
<-- 数组元素的添加 -->
arr.push(val)   //在数组的尾部添加一个值，返回该元素，并修改数组本身
arr.unshift(val)  //在数组的头部添加一个值，返回该元素，并修改数组本身
arr.splice(1,0,2) //第一个参数指定了插入(删除)元素的起始位置，第二个参数指定了个数
//第二个之后的参数数量为任意个，指定了需要插入到数组中的元素
 
<-- 数组元素的删除 -->
arr.pop() //删除数组的最后一个元素，返回该元素，并修改数组本身
arr.shift() //删除数组头部的元素，返回该元素，并修改数组本身
arr.splice(1,2) //表示删除元素的从第‘1’个开始，到第‘2’个结束,也就是删除了第二个和第三个元素
arr.slice(2,3) //两个参数指截取数组开始和结束的字段，
//如果第二个值是负整数，则代表倒数第几个元素，如果第二个值缺省，则代表到最后一个元素
//该方法返回截取的片段，并且不会修改调用的数组
 
<-- 数组元素的排序 -->
arr.sort((a,b)=>{return (a-b)}) //默认按字母表顺序排，a-b从小到大排，b-a从大到小
 
<-- 数组元素的遍历 -->
arr.forEach((item)=>{}) //该方法会自动过滤掉空值
arr.map((item)=>{return item+1}) //该方法会返回一个新的数组，并不会修改原数组
arr.fiter((item)=>{return item!==1})//该方法会返回一个索引值符合回调函数判断的新数组
 
<-- 数组元素的逻辑判定 --> 
arr.every((item)=>{return item===1})//判定数组中的每个元素是否符合回调函数里的判断，返回一个布尔值，遇到false就终止循环
arr.some((item)=>{return item===1})//判定数组中是否有元素符合回调函数里的判断，返回一个布尔值，遇到true就终止循环
 
<-- 连接两个数组 -->
arr.concat([1,2,3]) //该方法返回一个新数组，对原数组没有影响，所以需要一个新的数组接收值
 
<-- 数组转字符串 -->
arr.join('/') //括号内指定元素之间的分隔符，默认是逗号，该方法是String.split()的逆向操作
 
<-- 数组元素倒序 -->
arr.reverse() //该方法把数组中的元素颠倒，如果面试考这个，可以直接写
 
<-- 数组元素的组合 -->
arr.reduce((total,current)=>{
    return total+current
},0)
//reduce本意是缩小，减少，却经常被拿来做加法运算，后面我会详细介绍这个方法
 
<-- 数组元素的查询 -->
arr.find((item)=>{return item===1}) //查找到第一个符合条件的值，并返回该值
arr.indexOf((item)=>{return item===1}) //查找到第一个符合条件的值，并返回索引值
}*/